// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'imageries/imageries.dart';
import 'patients/patient.dart';
import 'settings/settings_page/settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5790608695419152537),
      name: 'Address',
      lastPropertyId: const obx_int.IdUid(5, 2673524711782979235),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3846222487873455192),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4553078910860935321),
            name: 'town',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4384570125180821824),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2711522495503696342),
            name: 'province',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2673524711782979235),
            name: 'country',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3919655169571422731),
      name: 'Contact',
      lastPropertyId: const obx_int.IdUid(4, 2705118389734424374),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7569726006224196429),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 662147049490811216),
            name: 'countryCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4637065868171113316),
            name: 'mnp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2705118389734424374),
            name: 'phoneCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 430220069305616910),
      name: 'Imagery',
      lastPropertyId: const obx_int.IdUid(2, 8990586587543432642),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 945769272642080501),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8990586587543432642),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3919020003252424742),
      name: 'Lesion',
      lastPropertyId: const obx_int.IdUid(2, 923370276622040824),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2588520022770619557),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 923370276622040824),
            name: 'patterns',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4393905431606465552),
      name: 'Patient',
      lastPropertyId: const obx_int.IdUid(8, 1994623808385028941),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7100427488897085594),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8642394264285121856),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1154373869396754028),
            name: 'gender',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4225772569129448494),
            name: 'editing',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3099162024490369931),
            name: 'addressId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5606096860801801926),
            relationTarget: 'Address'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3475723054416550802),
            name: 'dateOfBirth',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3499754454347781884),
            name: 'contactId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 976081800411190137),
            relationTarget: 'Contact'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1994623808385028941),
            name: 'diagnosis',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 5993190069187206859),
            name: 'lesions',
            targetId: const obx_int.IdUid(4, 3919020003252424742)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 8981403669754616509),
            name: 'images',
            targetId: const obx_int.IdUid(3, 430220069305616910))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8895170857120471930),
      name: 'Settings',
      lastPropertyId: const obx_int.IdUid(13, 1566245861493886741),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1273373597868336050),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5412003072210739022),
            name: 'colorIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2769269270060250802),
            name: 'trueThemeMode',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1401276562528617677),
            name: 'themeModeIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7605769373942067071),
            name: 'isColorsVisible',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4390360707343958008),
            name: 'isSearching',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3926883803602625501),
            name: 'padding',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3917036017541087792),
            name: 'height',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4237452943417508350),
            name: 'borderRadius',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6814091615037074717),
            name: 'textScaleFactor',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4145241301594143221),
            name: 'elevation',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6362890227870361645),
            name: 'font',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1566245861493886741),
            name: 'isAdvancedThemingMode',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 8895170857120471930),
      lastIndexId: const obx_int.IdUid(2, 976081800411190137),
      lastRelationId: const obx_int.IdUid(2, 8981403669754616509),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Address: obx_int.EntityDefinition<Address>(
        model: _entities[0],
        toOneRelations: (Address object) => [],
        toManyRelations: (Address object) => {},
        getId: (Address object) => object.id,
        setId: (Address object, int id) {
          object.id = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final townOffset = fbb.writeString(object.town);
          final cityOffset = fbb.writeString(object.city);
          final provinceOffset = fbb.writeString(object.province);
          final countryOffset = fbb.writeString(object.country);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, townOffset);
          fbb.addOffset(2, cityOffset);
          fbb.addOffset(3, provinceOffset);
          fbb.addOffset(4, countryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Address()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..town = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..city = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..province = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..country = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');

          return object;
        }),
    Contact: obx_int.EntityDefinition<Contact>(
        model: _entities[1],
        toOneRelations: (Contact object) => [],
        toManyRelations: (Contact object) => {},
        getId: (Contact object) => object.id,
        setId: (Contact object, int id) {
          object.id = id;
        },
        objectToFB: (Contact object, fb.Builder fbb) {
          final countryCodeOffset = fbb.writeString(object.countryCode);
          final mnpOffset = fbb.writeString(object.mnp);
          final phoneCodeOffset = fbb.writeString(object.phoneCode);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, countryCodeOffset);
          fbb.addOffset(2, mnpOffset);
          fbb.addOffset(3, phoneCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Contact()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..countryCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..mnp = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..phoneCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');

          return object;
        }),
    Imagery: obx_int.EntityDefinition<Imagery>(
        model: _entities[2],
        toOneRelations: (Imagery object) => [],
        toManyRelations: (Imagery object) => {},
        getId: (Imagery object) => object.id,
        setId: (Imagery object, int id) {
          object.id = id;
        },
        objectToFB: (Imagery object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, pathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Imagery()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..path = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');

          return object;
        }),
    Lesion: obx_int.EntityDefinition<Lesion>(
        model: _entities[3],
        toOneRelations: (Lesion object) => [],
        toManyRelations: (Lesion object) => {},
        getId: (Lesion object) => object.id,
        setId: (Lesion object, int id) {
          object.id = id;
        },
        objectToFB: (Lesion object, fb.Builder fbb) {
          final patternsOffset = fbb.writeString(object.patterns);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, patternsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Lesion()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..patterns = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');

          return object;
        }),
    Patient: obx_int.EntityDefinition<Patient>(
        model: _entities[4],
        toOneRelations: (Patient object) => [object.address, object.contact],
        toManyRelations: (Patient object) => {
              obx_int.RelInfo<Patient>.toMany(1, object.id): object.lesions,
              obx_int.RelInfo<Patient>.toMany(2, object.id): object.images
            },
        getId: (Patient object) => object.id,
        setId: (Patient object, int id) {
          object.id = id;
        },
        objectToFB: (Patient object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final diagnosisOffset = fbb.writeString(object.diagnosis);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.gender);
          fbb.addBool(3, object.editing);
          fbb.addInt64(4, object.address.targetId);
          fbb.addInt64(5, object.dateOfBirth.millisecondsSinceEpoch);
          fbb.addInt64(6, object.contact.targetId);
          fbb.addOffset(7, diagnosisOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Patient()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..gender =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false)
            ..editing =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..dateOfBirth = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..diagnosis = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '');
          object.address.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.address.attach(store);
          object.contact.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.contact.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Patient>(object.lesions,
              store, obx_int.RelInfo<Patient>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Patient>(object.images, store,
              obx_int.RelInfo<Patient>.toMany(2, object.id));
          return object;
        }),
    Settings: obx_int.EntityDefinition<Settings>(
        model: _entities[5],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          final fontOffset = fbb.writeString(object.font);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.colorIndex);
          fbb.addBool(2, object.trueThemeMode);
          fbb.addInt64(3, object.themeModeIndex);
          fbb.addBool(4, object.isColorsVisible);
          fbb.addBool(5, object.isSearching);
          fbb.addFloat64(6, object.padding);
          fbb.addFloat64(7, object.height);
          fbb.addFloat64(8, object.borderRadius);
          fbb.addFloat64(9, object.textScaleFactor);
          fbb.addFloat64(10, object.elevation);
          fbb.addOffset(11, fontOffset);
          fbb.addBool(12, object.isAdvancedThemingMode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final colorIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final trueThemeModeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final themeModeIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final isColorsVisibleParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final isSearchingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final paddingParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final heightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final borderRadiusParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final textScaleFactorParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final elevationParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final fontParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final isAdvancedThemingModeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final object = Settings(
              id: idParam,
              colorIndex: colorIndexParam,
              trueThemeMode: trueThemeModeParam,
              themeModeIndex: themeModeIndexParam,
              isColorsVisible: isColorsVisibleParam,
              isSearching: isSearchingParam,
              padding: paddingParam,
              height: heightParam,
              borderRadius: borderRadiusParam,
              textScaleFactor: textScaleFactorParam,
              elevation: elevationParam,
              font: fontParam,
              isAdvancedThemingMode: isAdvancedThemingModeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// See [Address.id].
  static final id =
      obx.QueryIntegerProperty<Address>(_entities[0].properties[0]);

  /// See [Address.town].
  static final town =
      obx.QueryStringProperty<Address>(_entities[0].properties[1]);

  /// See [Address.city].
  static final city =
      obx.QueryStringProperty<Address>(_entities[0].properties[2]);

  /// See [Address.province].
  static final province =
      obx.QueryStringProperty<Address>(_entities[0].properties[3]);

  /// See [Address.country].
  static final country =
      obx.QueryStringProperty<Address>(_entities[0].properties[4]);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id =
      obx.QueryIntegerProperty<Contact>(_entities[1].properties[0]);

  /// See [Contact.countryCode].
  static final countryCode =
      obx.QueryStringProperty<Contact>(_entities[1].properties[1]);

  /// See [Contact.mnp].
  static final mnp =
      obx.QueryStringProperty<Contact>(_entities[1].properties[2]);

  /// See [Contact.phoneCode].
  static final phoneCode =
      obx.QueryStringProperty<Contact>(_entities[1].properties[3]);
}

/// [Imagery] entity fields to define ObjectBox queries.
class Imagery_ {
  /// See [Imagery.id].
  static final id =
      obx.QueryIntegerProperty<Imagery>(_entities[2].properties[0]);

  /// See [Imagery.path].
  static final path =
      obx.QueryStringProperty<Imagery>(_entities[2].properties[1]);
}

/// [Lesion] entity fields to define ObjectBox queries.
class Lesion_ {
  /// See [Lesion.id].
  static final id =
      obx.QueryIntegerProperty<Lesion>(_entities[3].properties[0]);

  /// See [Lesion.patterns].
  static final patterns =
      obx.QueryStringProperty<Lesion>(_entities[3].properties[1]);
}

/// [Patient] entity fields to define ObjectBox queries.
class Patient_ {
  /// See [Patient.id].
  static final id =
      obx.QueryIntegerProperty<Patient>(_entities[4].properties[0]);

  /// See [Patient.name].
  static final name =
      obx.QueryStringProperty<Patient>(_entities[4].properties[1]);

  /// See [Patient.gender].
  static final gender =
      obx.QueryBooleanProperty<Patient>(_entities[4].properties[2]);

  /// See [Patient.editing].
  static final editing =
      obx.QueryBooleanProperty<Patient>(_entities[4].properties[3]);

  /// See [Patient.address].
  static final address =
      obx.QueryRelationToOne<Patient, Address>(_entities[4].properties[4]);

  /// See [Patient.dateOfBirth].
  static final dateOfBirth =
      obx.QueryDateProperty<Patient>(_entities[4].properties[5]);

  /// See [Patient.contact].
  static final contact =
      obx.QueryRelationToOne<Patient, Contact>(_entities[4].properties[6]);

  /// See [Patient.diagnosis].
  static final diagnosis =
      obx.QueryStringProperty<Patient>(_entities[4].properties[7]);

  /// see [Patient.lesions]
  static final lesions =
      obx.QueryRelationToMany<Patient, Lesion>(_entities[4].relations[0]);

  /// see [Patient.images]
  static final images =
      obx.QueryRelationToMany<Patient, Imagery>(_entities[4].relations[1]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// See [Settings.id].
  static final id =
      obx.QueryIntegerProperty<Settings>(_entities[5].properties[0]);

  /// See [Settings.colorIndex].
  static final colorIndex =
      obx.QueryIntegerProperty<Settings>(_entities[5].properties[1]);

  /// See [Settings.trueThemeMode].
  static final trueThemeMode =
      obx.QueryBooleanProperty<Settings>(_entities[5].properties[2]);

  /// See [Settings.themeModeIndex].
  static final themeModeIndex =
      obx.QueryIntegerProperty<Settings>(_entities[5].properties[3]);

  /// See [Settings.isColorsVisible].
  static final isColorsVisible =
      obx.QueryBooleanProperty<Settings>(_entities[5].properties[4]);

  /// See [Settings.isSearching].
  static final isSearching =
      obx.QueryBooleanProperty<Settings>(_entities[5].properties[5]);

  /// See [Settings.padding].
  static final padding =
      obx.QueryDoubleProperty<Settings>(_entities[5].properties[6]);

  /// See [Settings.height].
  static final height =
      obx.QueryDoubleProperty<Settings>(_entities[5].properties[7]);

  /// See [Settings.borderRadius].
  static final borderRadius =
      obx.QueryDoubleProperty<Settings>(_entities[5].properties[8]);

  /// See [Settings.textScaleFactor].
  static final textScaleFactor =
      obx.QueryDoubleProperty<Settings>(_entities[5].properties[9]);

  /// See [Settings.elevation].
  static final elevation =
      obx.QueryDoubleProperty<Settings>(_entities[5].properties[10]);

  /// See [Settings.font].
  static final font =
      obx.QueryStringProperty<Settings>(_entities[5].properties[11]);

  /// See [Settings.isAdvancedThemingMode].
  static final isAdvancedThemingMode =
      obx.QueryBooleanProperty<Settings>(_entities[5].properties[12]);
}
